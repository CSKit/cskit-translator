require 'cskit'
require 'cskit/science_health'
require 'twitter_cldr'
require 'pathname'

include CSKit::Readers

# Do this hacky thing to disallow breaks after ". number" (and a few others).
# Probably should be easier to add ULI exceptions in TwitterCldr...
module TwitterCldr
  module Shared
    class BreakIterator

<<<<<<< HEAD
# mac os, ubuntu 12.04 too!
WORD_LIST = File.read("/usr/share/dict/words").split("\n")
=======
      private

      def exceptions_for_with_extras(locale, boundary_name)
        exceptions_for_without_extras(locale, boundary_name) +
          (1..9).map { |i| ". #{i}" } +
          ["St."]
      end

      alias_method :exceptions_for_without_extras, :exceptions_for
      alias_method :exceptions_for, :exceptions_for_with_extras

    end
  end
end

WORD_LIST = File.read(Pathname(__FILE__).dirname.join("wordlist.txt")).split("\r\n")
>>>>>>> 853add49c7a37bdc70ca37bb626f290e03fd00be

def fix_hyphens(text)
  text.gsub(/\-\s+/, "-").split(" ").map do |word|
    if word.include?("-")
      candidate = word.gsub("-", "")
      clean_candidate = candidate.gsub(/[\.\-_,;]/, "").downcase
      if WORD_LIST.include?(clean_candidate)
        candidate
      else
        word
      end
    else
      word
    end
  end.join(" ")
end

<<<<<<< HEAD
def import_english_sh
  volume = CSKit.get_volume(:science_health)
  reader = ScienceHealthReader.new(volume)
  sentence = ""
  sentence_index = 0
  cur_phrase = nil

  Phrase.delete_all  # clear all existing phrases

  reader.each_line(1, "vi") do |line, line_number, page_number|
    sentence += line.text
    sentence += " " unless sentence =~ /.*\-\z/

    if match = sentence.match(SENTENCE_TERMINATOR_REGEX)
      sentence_end = match.offset(0).first + match.captures.first.size
      found = sentence[0..sentence_end].strip
      found = " #{found}" if [0..1] == "- "  # add extra space if fragment begins with hyphen space
      found = fix_hyphens(found)

      # combine certain non-sentence fragments, i.e. ellipses
      if COMBINERS.any? { |combiner| combiner.call(found) }
        cur_phrase.update_attributes(key: "#{cur_phrase.key}#{found}")
      elsif cur_phrase && cur_phrase.key[-3..-1] == "..."
        cur_phrase.update_attributes(key: "#{cur_phrase.key}#{found}")
      else
        cur_phrase = Phrase.create(
          key: found,
          sort_key: sentence_index
        )
      end

      # puts found

      sentence_index += 1
      sentence = sentence[sentence_end + 1..-1] || ""
    end
  end
end
=======
volume = CSKit.get_volume(:science_health)
reader = ScienceHealthReader.new(volume)

# clear all existing phrases
if Rails.env.development?
  Phrase.delete_all
  ActiveRecord::Base.connection.execute(
    "delete from sqlite_sequence where name='phrases';"
  )
else
  ActiveRecord::Base.connection.execute(
    "truncate table phrases;"
  )
end

if ARGV[0] == "-p"
  puts "Splitting by paragraph."
else
  puts "Splitting by sentence."
end

reader.each_paragraph(1, "vi") do |paragraph|
  $stdout.write("\rProcessing page #{paragraph.page_start}... ")
  paragraph_text = fix_hyphens(paragraph.lines.map(&:text).join(" "))

  texts = if ARGV[0] == "-p"
    [paragraph_text]
  else
    paragraph_text.localize.each_sentence.to_a.map { |s| s.to_s.strip }
  end

  texts.each do |text|
    cur_phrase = Phrase.create(
      key: text,
      page: paragraph.page_start
    )
  end
end

puts "done."
>>>>>>> 853add49c7a37bdc70ca37bb626f290e03fd00be
